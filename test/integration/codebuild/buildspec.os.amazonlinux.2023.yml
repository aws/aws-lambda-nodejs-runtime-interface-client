version: 0.2

env:
  variables:
    OS_DISTRIBUTION: amazonlinux
    NPX_BINARY_LOCATION: "/usr/bin/npx"
batch:
  build-matrix:
    static:
      ignore-failure: false
      env:
        privileged-mode: true
    dynamic:
      env:
        variables:
          DISTRO_VERSION:
            - "2023"
          RUNTIME_VERSION:
            - "18"
phases:
  pre_build:
    commands:
      - export IMAGE_TAG="nodejs-${OS_DISTRIBUTION}-${DISTRO_VERSION}:${RUNTIME_VERSION}"
      - echo "Extracting and including the Runtime Interface Emulator"
      - SCRATCH_DIR=".scratch"
      - mkdir "${SCRATCH_DIR}"
      - ARCHITECTURE=$(arch)
      - >
        if [[ "$ARCHITECTURE" == "x86_64" ]]; then
            RIE="aws-lambda-rie"
        elif [[ "$ARCHITECTURE" == "aarch64" ]]; then
            RIE="aws-lambda-rie-arm64"
        else
            echo "Architecture $ARCHITECTURE is not currently supported."
            exit 1
        fi
      - tar -xvf test/integration/resources/${RIE}.tar.gz --directory "${SCRATCH_DIR}"
      - >
        cp "test/integration/docker/Dockerfile.echo.${OS_DISTRIBUTION}" \
          "${SCRATCH_DIR}/Dockerfile.echo.${OS_DISTRIBUTION}.tmp"
      - >
        echo "COPY ${SCRATCH_DIR}/${RIE} /usr/bin/${RIE}" >> \
          "${SCRATCH_DIR}/Dockerfile.echo.${OS_DISTRIBUTION}.tmp"
      - >
        if [[ -z "${DOCKERHUB_USERNAME}" && -z "${DOCKERHUB_PASSWORD}" ]];
        then
            echo "DockerHub credentials not set as CodeBuild environment variables. Continuing without docker login."
        else
            echo "Performing DockerHub login . . ."
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
        fi
      - echo "Building image ${IMAGE_TAG}"
      - >
        docker build . \
          -f "${SCRATCH_DIR}/Dockerfile.echo.${OS_DISTRIBUTION}.tmp" \
          -t "${IMAGE_TAG}" \
          --build-arg RUNTIME_VERSION="${RUNTIME_VERSION}" \
          --build-arg DISTRO_VERSION="${DISTRO_VERSION}" \
          --build-arg ARCHITECTURE="${ARCHITECTURE}"
  build:
    commands:
      - set -x
      - echo "Running Image ${IMAGE_TAG}"
      - docker network create "${OS_DISTRIBUTION}-network"
      - >
        docker run \
          --detach \
          --name "${OS_DISTRIBUTION}-app" \
          --network "${OS_DISTRIBUTION}-network" \
          --entrypoint="" \
          "${IMAGE_TAG}" \
          sh -c "/usr/bin/${RIE} ${NPX_BINARY_LOCATION} aws-lambda-ric index.handler"
      - sleep 2
      - >
        docker run \
          --name "${OS_DISTRIBUTION}-tester" \
          --env "TARGET=${OS_DISTRIBUTION}-app" \
          --network "${OS_DISTRIBUTION}-network" \
          --entrypoint="" \
          "${IMAGE_TAG}" \
          sh -c 'curl -X POST "http://${TARGET}:8080/2015-03-31/functions/function/invocations" -d "{}" --max-time 10'
      - actual="$(docker logs --tail 1 "${OS_DISTRIBUTION}-tester" | xargs)"
      - expected='success'
      - |
        echo "Response: ${actual}"
        if [[ "$actual" != "$expected" ]]; then
          echo "fail! runtime: $RUNTIME - expected output $expected - got $actual"
          exit -1
        fi
    finally:
      - |
          echo "---------Container Logs: ${OS_DISTRIBUTION}-app----------"
          echo
          docker logs "${OS_DISTRIBUTION}-app" || true
          echo
          echo "---------------------------------------------------"
          echo "--------Container Logs: ${OS_DISTRIBUTION}-tester--------"
          echo
          docker logs "${OS_DISTRIBUTION}-tester" || true
          echo
          echo "---------------------------------------------------"
      - echo "Cleaning up..."
      - docker stop "${OS_DISTRIBUTION}-app" || true
      - docker rm --force "${OS_DISTRIBUTION}-app" || true
      - docker stop "${OS_DISTRIBUTION}-tester" || true
      - docker rm --force "${OS_DISTRIBUTION}-tester" || true
      - docker network rm "${OS_DISTRIBUTION}-network" || true
      - docker rmi "${IMAGE_TAG}" || true
