# Define global args
ARG FUNCTION_DIR="/home/app/"
ARG RUNTIME_VERSION
ARG DISTRO_VERSION

# Stage 1 - bundle base image + runtime
# Grab a fresh copy of the image and install Node
FROM amazonlinux:${DISTRO_VERSION} AS node-amazonlinux
# Include global arg in this stage of the build
ARG RUNTIME_VERSION
ARG DISTRO_VERSION
# Install Py3 required to build Node16+
RUN if [[ "${DISTRO_VERSION}" == "2" ]] ; then amazon-linux-extras install python3.8 && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 ; fi
# Install NodeJS
RUN if [[ "${RUNTIME_VERSION}" == "14" ]]; then \
    yum install -y tar gzip xz && \
    AARCH="$([[ "$(arch)" == "x86_64" ]] && echo "x64" || echo "arm64")" && \
    NODE_URL="https://nodejs.org/download/release/v14.21.3/node-v14.21.3-linux-$AARCH.tar.xz" && \
    curl -fL "$NODE_URL" | tar -C /usr --strip-components 1 -xJf - && \
    yum clean all -q && rm -rf /var/cache/yum ; \
else \
    yum install https://rpm.nodesource.com/pub_${RUNTIME_VERSION}.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y && \
    yum install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1s ; \
fi

# Stage 2 - build function and dependencies
FROM node-amazonlinux AS build-image
ARG ARCHITECTURE
# Install aws-lambda-cpp build dependencies
RUN yum install -y \
        tar \
        gzip \
        make \
        wget \
        autoconf \
        automake \
        libtool \
        libcurl-devel \
        gcc-c++
# Install a modern CMake
RUN wget --quiet -O cmake-install https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-linux-${ARCHITECTURE}.sh && \
    sh cmake-install --skip-license --prefix=/usr --exclude-subdirectory;

# Include global arg in this stage of the build
ARG FUNCTION_DIR
# Create function directory
RUN mkdir -p ${FUNCTION_DIR}

# Copy & build Runtime Interface Client package (as we're installing it from a local filesystem source)
WORKDIR ${FUNCTION_DIR}/deps/aws-lambda-ric
COPY . .

# Node14 uses npm@6.14.18 by default which will downgrade permissions, if it's root,
# before running any build scripts: https://github.com/npm/npm/issues/3497 
# Starting from npm@7.0.0, when npm is run as root, 
# scripts are always run with the effective uid and gid of the working directory owner.
RUN if [[ $(node -v | cut -c 1-3) == "v14" ]] ; then npm install -g npm@7 ; fi
RUN make build && \
    npm run test:unit

# Copy function code
COPY test/integration/test-handlers/echo/* ${FUNCTION_DIR}
# Install the function's dependencies
WORKDIR ${FUNCTION_DIR}
RUN npm install


# Stage 3 - final runtime image
# Grab a fresh copy of the Node image
FROM node-amazonlinux

# Required for Node runtimes which use npm@8.6.0+ because
# by default npm writes logs under /home/.npm and Lambda fs is read-only
ENV NPM_CONFIG_CACHE=/tmp/.npm
# Include global arg in this stage of the build
ARG FUNCTION_DIR
# Set working directory to function root directory
WORKDIR ${FUNCTION_DIR}
# Copy in the built dependencies
COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}

ENTRYPOINT [ "/usr/bin/npx", "aws-lambda-ric" ]
CMD [ "index.handler" ]
